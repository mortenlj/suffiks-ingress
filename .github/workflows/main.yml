name: Build and deploy Suffiks Ingress

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:

env:
  REGISTRY: ghcr.io/${{ github.repository }}
  EARTHLY_USE_INLINE_CACHE: true
  EARTHLY_SAVE_INLINE_CACHE: true
  EARTHLY_VERBOSE: true
  EARTHLY_FULL_TARGET: true
  EARTHLY_OUTPUT: true

jobs:
  setup:
    name: Set variables
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # ratchet:actions/checkout@v3
      - name: "Set image version"
        id: constants
        run: |
          export version="$(date +%Y%m%d%H%M%S)-$(git describe --always --dirty --exclude '*')"
          echo "VERSION=${version}" >> ${GITHUB_OUTPUT}
    outputs:
      VERSION: "${{ steps.constants.outputs.VERSION }}"

  build:
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    needs: setup
    env:
      VERSION: "${{ needs.setup.outputs.VERSION }}"
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # ratchet:actions/checkout@v3
        with:
          submodules: 'true'
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # ratchet:docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install earthly
        uses: earthly/actions-setup@135d686cdc4619918fd1b542d0a08d61dd104518 # ratchet:earthly/actions-setup@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and possibly push suffiks-ingress
        env:
          EARTHLY_PUSH: "${{ github.ref == 'refs/heads/main' }}"
        run: |
          earthly +deploy --VERSION=${VERSION} --REGISTRY=${REGISTRY}
#      - name: Save manifests for later deploy
#        uses: actions/upload-artifact@v3
#        with:
#          name: manifests
#          path: deploy.yaml

#  deploy:
#    name: Deploy
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs:
#      - setup
#      - build
#    steps:
#      - name: Download manifests from build
#        uses: actions/download-artifact@v3
#        with:
#          name: manifests
#      - name: Install and configure kubectl
#        run: |
#          mkdir -p /tmp/kubectl
#          cd /tmp/kubectl
#          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
#          echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
#          chmod +x kubectl
#          echo "${{ secrets.KUBECONFIG }}" > /tmp/kubectl/kubeconfig
#          echo "KUBECONFIG=/tmp/kubectl/kubeconfig" >> ${GITHUB_ENV}
#      - id: join-zt
#        name: Join ZeroTier network
#        uses: mortenlj/zerotier-actions/join-zt@main
#        with:
#          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
#          api_accesstoken: ${{ secrets.ZEROTIER_API_ACCESSTOKEN }}
#      - name: Run kubectl apply
#        run: |
#          export PATH=/tmp/kubectl:${PATH}
#          echo "::group::ZeroTier debugging"
#          sudo zerotier-cli info
#          sudo zerotier-cli peers
#          sudo zerotier-cli listnetworks
#          ping -c 5 k3s.home.ibidem.no
#          echo "::endgroup::"
#          kubectl apply --namespace=default --context=k3s-home --filename=deploy.yaml --selector=app=showrunner --prune=true --wait=true --timeout=60s
#      - name: Leave ZeroTier network
#        if: always()
#        uses: mortenlj/zerotier-actions/leave-zt@main
#        with:
#          node_id: ${{ steps.join-zt.outputs.node_id }}
#          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
#          api_accesstoken: ${{ secrets.ZEROTIER_API_ACCESSTOKEN }}
